package org.generation.util;

import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.generation.exceptions.EmailFormatException;

public class Person {
	public String name;
	public int age;
	public String email;
	public String rfc;
	public String address;
	
	public Person(String name, int age, String email, String address, String rfc)
			throws EmailFormatException{
		this.name = name.toUpperCase();;
		this.age = (age<18)?18:age;
		this.email = validEmail(email.toLowerCase());
		this.address = address;
		this.rfc = rfc.toUpperCase();
	}//constructor
	
	private String validEmail(String email) throws EmailFormatException {
		String res ="jdoe@hotmail.com";
		Pattern regex = Pattern.compile("^[a-z_0-9.%+-]+@[a-z0-9.-]+\\.[a-z]{2,6}", 
				Pattern.CASE_INSENSITIVE);
		Matcher matcher = regex.matcher(email);
		if (matcher.matches()) {//si el correo es válido
			res = email;
		}else {
			throw new EmailFormatException("El formato del correo no es válido")
		}// if email válido
//		if(email.contains("@")) {
			
//		}// if contains @
		return res;
	}//validEmail
	
	public Person(String name, int age, String email, String address) 
			throws EmailFormatException {
		this(name, age, email, address, "XAXX010101000");
	}//constructor

	@Override
	public String toString() {
		return "Person [name=" + name + ", age=" + age + ", email=" + email + ", rfc=" + rfc + ", address=" + address
				+ "]";
	}//toString

	
	
}// class Person
